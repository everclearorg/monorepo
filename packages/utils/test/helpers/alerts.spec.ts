import {restore, reset, stub, SinonStub, SinonStubbedInstance, createStubInstance} from 'sinon';
import {Logger, expect, resolveAlerts, sendAlerts, createRequestContext} from '../../src';
import { TEST_REPORT } from './mock';
import * as telegram from '../../src/alerts/telegram';
import * as discord from '../../src/alerts/discord';
import * as betterUptime from '../../src/alerts/betteruptime';

const MOCK_TELEGRAM = { apiKey: '123', chatId: '456' };
const MOCK_BETTERUPTIME = { apiKey: '123', requesterEmail: 'email@mock' };
const MOCK_DISCORD = { url: 'https://discord.com' };
const config = {
  network: 'staging',
  telegram: MOCK_TELEGRAM,
  betterUptime: MOCK_BETTERUPTIME,
  discord: MOCK_DISCORD,
};

describe('helpers:alerts', () => {
    let telegramStub: SinonStub;
    let discordStub: SinonStub;
    let betterUptimeStub: SinonStub;
    let resolveBetterUptimeStub: SinonStub;
    let logger: SinonStubbedInstance<Logger>;
  
    beforeEach(() => {
      logger = createStubInstance(Logger);

      telegramStub = stub(telegram, 'alertTelegram');
      telegramStub.resolves();
      discordStub = stub(discord, 'alertDiscord');
      discordStub.resolves();
      betterUptimeStub = stub(betterUptime, 'alertViaBetterUptime');
      betterUptimeStub.resolves();
      resolveBetterUptimeStub = stub(betterUptime, 'resolveAlertViaBetterUptime');
      resolveBetterUptimeStub.resolves();
    });
  
    afterEach(() => {
      restore();
      reset();
    });
  
    describe('#sendAlerts', () => {
      it('should work', async () => {
        expect(sendAlerts(TEST_REPORT, logger, config, createRequestContext('test'))).to.be.not.throw;
      });
    });

    describe('#resolveAlerts', () => {
      it('should resolve alerts generated by sendAlerts', async () => {
        await sendAlerts(TEST_REPORT, logger, config, createRequestContext('test'));
        await resolveAlerts(TEST_REPORT, logger, config, createRequestContext('test'));
        expect(betterUptimeStub.getCalls().length).to.be.eq(1);
        expect(resolveBetterUptimeStub.getCalls().length).to.be.eq(1);

        const alertReport = betterUptimeStub.getCall(0).args[0];
        const resolveReport = resolveBetterUptimeStub.getCall(0).args[0];
        
        expect(alertReport.severity).to.be.eq(resolveReport.severity);
        expect(alertReport.reason).to.be.eq(resolveReport.reason);
        expect(alertReport.env).to.be.eq(resolveReport.env);
        expect(alertReport.ids).to.be.eq(resolveReport.ids);
        expect(alertReport.timestamp).to.be.eq(resolveReport.timestamp);
        expect(alertReport.type).to.be.eq(resolveReport.type);
      })
    });
  });
